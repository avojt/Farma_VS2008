'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("farmaDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class farmaDataSet
    Inherits System.Data.DataSet
    
    Private tablekonta As kontaDataTable
    
    Private tableodlozeno As odlozenoDataTable
    
    Private tablepartneri As partneriDataTable
    
    Private tablepdv As pdvDataTable
    
    Private tableroba As robaDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("konta")) Is Nothing) Then
                MyBase.Tables.Add(New kontaDataTable(ds.Tables("konta")))
            End If
            If (Not (ds.Tables("odlozeno")) Is Nothing) Then
                MyBase.Tables.Add(New odlozenoDataTable(ds.Tables("odlozeno")))
            End If
            If (Not (ds.Tables("partneri")) Is Nothing) Then
                MyBase.Tables.Add(New partneriDataTable(ds.Tables("partneri")))
            End If
            If (Not (ds.Tables("pdv")) Is Nothing) Then
                MyBase.Tables.Add(New pdvDataTable(ds.Tables("pdv")))
            End If
            If (Not (ds.Tables("roba")) Is Nothing) Then
                MyBase.Tables.Add(New robaDataTable(ds.Tables("roba")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property konta() As kontaDataTable
        Get
            Return Me.tablekonta
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property odlozeno() As odlozenoDataTable
        Get
            Return Me.tableodlozeno
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partneri() As partneriDataTable
        Get
            Return Me.tablepartneri
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pdv() As pdvDataTable
        Get
            Return Me.tablepdv
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property roba() As robaDataTable
        Get
            Return Me.tableroba
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As farmaDataSet = CType(MyBase.Clone,farmaDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("konta")) Is Nothing) Then
                MyBase.Tables.Add(New kontaDataTable(ds.Tables("konta")))
            End If
            If (Not (ds.Tables("odlozeno")) Is Nothing) Then
                MyBase.Tables.Add(New odlozenoDataTable(ds.Tables("odlozeno")))
            End If
            If (Not (ds.Tables("partneri")) Is Nothing) Then
                MyBase.Tables.Add(New partneriDataTable(ds.Tables("partneri")))
            End If
            If (Not (ds.Tables("pdv")) Is Nothing) Then
                MyBase.Tables.Add(New pdvDataTable(ds.Tables("pdv")))
            End If
            If (Not (ds.Tables("roba")) Is Nothing) Then
                MyBase.Tables.Add(New robaDataTable(ds.Tables("roba")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablekonta = CType(MyBase.Tables("konta"),kontaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablekonta) Is Nothing) Then
                Me.tablekonta.InitVars
            End If
        End If
        Me.tableodlozeno = CType(MyBase.Tables("odlozeno"),odlozenoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableodlozeno) Is Nothing) Then
                Me.tableodlozeno.InitVars
            End If
        End If
        Me.tablepartneri = CType(MyBase.Tables("partneri"),partneriDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepartneri) Is Nothing) Then
                Me.tablepartneri.InitVars
            End If
        End If
        Me.tablepdv = CType(MyBase.Tables("pdv"),pdvDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepdv) Is Nothing) Then
                Me.tablepdv.InitVars
            End If
        End If
        Me.tableroba = CType(MyBase.Tables("roba"),robaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableroba) Is Nothing) Then
                Me.tableroba.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "farmaDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/farmaDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablekonta = New kontaDataTable
        MyBase.Tables.Add(Me.tablekonta)
        Me.tableodlozeno = New odlozenoDataTable
        MyBase.Tables.Add(Me.tableodlozeno)
        Me.tablepartneri = New partneriDataTable
        MyBase.Tables.Add(Me.tablepartneri)
        Me.tablepdv = New pdvDataTable
        MyBase.Tables.Add(Me.tablepdv)
        Me.tableroba = New robaDataTable
        MyBase.Tables.Add(Me.tableroba)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializekonta() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeodlozeno() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepartneri() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepdv() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeroba() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As farmaDataSet = New farmaDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub kontaRowChangeEventHandler(ByVal sender As Object, ByVal e As kontaRowChangeEvent)
    
    Public Delegate Sub odlozenoRowChangeEventHandler(ByVal sender As Object, ByVal e As odlozenoRowChangeEvent)
    
    Public Delegate Sub partneriRowChangeEventHandler(ByVal sender As Object, ByVal e As partneriRowChangeEvent)
    
    Public Delegate Sub pdvRowChangeEventHandler(ByVal sender As Object, ByVal e As pdvRowChangeEvent)
    
    Public Delegate Sub robaRowChangeEventHandler(ByVal sender As Object, ByVal e As robaRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class kontaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_konto As System.Data.DataColumn
        
        Private columnkonto As System.Data.DataColumn
        
        Private columnnaziv As System.Data.DataColumn
        
        Private columndozvoljeno_knjizenje As System.Data.DataColumn
        
        Private columndevizni As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "konta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_kontoColumn() As System.Data.DataColumn
            Get
                Return Me.columnid_konto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kontoColumn() As System.Data.DataColumn
            Get
                Return Me.columnkonto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nazivColumn() As System.Data.DataColumn
            Get
                Return Me.columnnaziv
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dozvoljeno_knjizenjeColumn() As System.Data.DataColumn
            Get
                Return Me.columndozvoljeno_knjizenje
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property devizniColumn() As System.Data.DataColumn
            Get
                Return Me.columndevizni
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As kontaRow
            Get
                Return CType(Me.Rows(index),kontaRow)
            End Get
        End Property
        
        Public Event kontaRowChanging As kontaRowChangeEventHandler
        
        Public Event kontaRowChanged As kontaRowChangeEventHandler
        
        Public Event kontaRowDeleting As kontaRowChangeEventHandler
        
        Public Event kontaRowDeleted As kontaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddkontaRow(ByVal row As kontaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddkontaRow(ByVal konto As String, ByVal naziv As String, ByVal dozvoljeno_knjizenje As Boolean, ByVal devizni As Boolean) As kontaRow
            Dim rowkontaRow As kontaRow = CType(Me.NewRow,kontaRow)
            rowkontaRow.ItemArray = New Object() {Nothing, konto, naziv, dozvoljeno_knjizenje, devizni}
            Me.Rows.Add(rowkontaRow)
            Return rowkontaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid_konto(ByVal id_konto As Integer) As kontaRow
            Return CType(Me.Rows.Find(New Object() {id_konto}),kontaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As kontaDataTable = CType(MyBase.Clone,kontaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New kontaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid_konto = MyBase.Columns("id_konto")
            Me.columnkonto = MyBase.Columns("konto")
            Me.columnnaziv = MyBase.Columns("naziv")
            Me.columndozvoljeno_knjizenje = MyBase.Columns("dozvoljeno_knjizenje")
            Me.columndevizni = MyBase.Columns("devizni")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid_konto = New System.Data.DataColumn("id_konto", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_konto)
            Me.columnkonto = New System.Data.DataColumn("konto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkonto)
            Me.columnnaziv = New System.Data.DataColumn("naziv", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnaziv)
            Me.columndozvoljeno_knjizenje = New System.Data.DataColumn("dozvoljeno_knjizenje", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndozvoljeno_knjizenje)
            Me.columndevizni = New System.Data.DataColumn("devizni", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndevizni)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnid_konto}, true))
            Me.columnid_konto.AutoIncrement = true
            Me.columnid_konto.AllowDBNull = false
            Me.columnid_konto.ReadOnly = true
            Me.columnid_konto.Unique = true
            Me.columnkonto.MaxLength = 10
            Me.columnnaziv.MaxLength = 400
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewkontaRow() As kontaRow
            Return CType(Me.NewRow,kontaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New kontaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(kontaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.kontaRowChangedEvent) Is Nothing) Then
                RaiseEvent kontaRowChanged(Me, New kontaRowChangeEvent(CType(e.Row,kontaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.kontaRowChangingEvent) Is Nothing) Then
                RaiseEvent kontaRowChanging(Me, New kontaRowChangeEvent(CType(e.Row,kontaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.kontaRowDeletedEvent) Is Nothing) Then
                RaiseEvent kontaRowDeleted(Me, New kontaRowChangeEvent(CType(e.Row,kontaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.kontaRowDeletingEvent) Is Nothing) Then
                RaiseEvent kontaRowDeleting(Me, New kontaRowChangeEvent(CType(e.Row,kontaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovekontaRow(ByVal row As kontaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As farmaDataSet = New farmaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "kontaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class odlozenoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_odlozeno As System.Data.DataColumn
        
        Private columnsifra As System.Data.DataColumn
        
        Private columnopis As System.Data.DataColumn
        
        Private columnodlozeno As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "odlozeno"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_odlozenoColumn() As System.Data.DataColumn
            Get
                Return Me.columnid_odlozeno
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sifraColumn() As System.Data.DataColumn
            Get
                Return Me.columnsifra
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property opisColumn() As System.Data.DataColumn
            Get
                Return Me.columnopis
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property odlozenoColumn() As System.Data.DataColumn
            Get
                Return Me.columnodlozeno
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As odlozenoRow
            Get
                Return CType(Me.Rows(index),odlozenoRow)
            End Get
        End Property
        
        Public Event odlozenoRowChanging As odlozenoRowChangeEventHandler
        
        Public Event odlozenoRowChanged As odlozenoRowChangeEventHandler
        
        Public Event odlozenoRowDeleting As odlozenoRowChangeEventHandler
        
        Public Event odlozenoRowDeleted As odlozenoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddodlozenoRow(ByVal row As odlozenoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddodlozenoRow(ByVal sifra As String, ByVal opis As String, ByVal odlozeno As Integer) As odlozenoRow
            Dim rowodlozenoRow As odlozenoRow = CType(Me.NewRow,odlozenoRow)
            rowodlozenoRow.ItemArray = New Object() {Nothing, sifra, opis, odlozeno}
            Me.Rows.Add(rowodlozenoRow)
            Return rowodlozenoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid_odlozeno(ByVal id_odlozeno As Integer) As odlozenoRow
            Return CType(Me.Rows.Find(New Object() {id_odlozeno}),odlozenoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As odlozenoDataTable = CType(MyBase.Clone,odlozenoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New odlozenoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid_odlozeno = MyBase.Columns("id_odlozeno")
            Me.columnsifra = MyBase.Columns("sifra")
            Me.columnopis = MyBase.Columns("opis")
            Me.columnodlozeno = MyBase.Columns("odlozeno")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid_odlozeno = New System.Data.DataColumn("id_odlozeno", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_odlozeno)
            Me.columnsifra = New System.Data.DataColumn("sifra", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsifra)
            Me.columnopis = New System.Data.DataColumn("opis", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnopis)
            Me.columnodlozeno = New System.Data.DataColumn("odlozeno", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnodlozeno)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnid_odlozeno}, true))
            Me.columnid_odlozeno.AutoIncrement = true
            Me.columnid_odlozeno.AllowDBNull = false
            Me.columnid_odlozeno.ReadOnly = true
            Me.columnid_odlozeno.Unique = true
            Me.columnsifra.MaxLength = 10
            Me.columnopis.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewodlozenoRow() As odlozenoRow
            Return CType(Me.NewRow,odlozenoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New odlozenoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(odlozenoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.odlozenoRowChangedEvent) Is Nothing) Then
                RaiseEvent odlozenoRowChanged(Me, New odlozenoRowChangeEvent(CType(e.Row,odlozenoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.odlozenoRowChangingEvent) Is Nothing) Then
                RaiseEvent odlozenoRowChanging(Me, New odlozenoRowChangeEvent(CType(e.Row,odlozenoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.odlozenoRowDeletedEvent) Is Nothing) Then
                RaiseEvent odlozenoRowDeleted(Me, New odlozenoRowChangeEvent(CType(e.Row,odlozenoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.odlozenoRowDeletingEvent) Is Nothing) Then
                RaiseEvent odlozenoRowDeleting(Me, New odlozenoRowChangeEvent(CType(e.Row,odlozenoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveodlozenoRow(ByVal row As odlozenoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As farmaDataSet = New farmaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "odlozenoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class partneriDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_partner As System.Data.DataColumn
        
        Private columnsifra As System.Data.DataColumn
        
        Private columnnaziv As System.Data.DataColumn
        
        Private columnadresa As System.Data.DataColumn
        
        Private columnmesto As System.Data.DataColumn
        
        Private columnpib As System.Data.DataColumn
        
        Private columnmaticni As System.Data.DataColumn
        
        Private columnregistarski As System.Data.DataColumn
        
        Private columnzr As System.Data.DataColumn
        
        Private columntelefon As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "partneri"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_partnerColumn() As System.Data.DataColumn
            Get
                Return Me.columnid_partner
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sifraColumn() As System.Data.DataColumn
            Get
                Return Me.columnsifra
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nazivColumn() As System.Data.DataColumn
            Get
                Return Me.columnnaziv
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property adresaColumn() As System.Data.DataColumn
            Get
                Return Me.columnadresa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mestoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmesto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pibColumn() As System.Data.DataColumn
            Get
                Return Me.columnpib
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property maticniColumn() As System.Data.DataColumn
            Get
                Return Me.columnmaticni
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registarskiColumn() As System.Data.DataColumn
            Get
                Return Me.columnregistarski
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property zrColumn() As System.Data.DataColumn
            Get
                Return Me.columnzr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telefonColumn() As System.Data.DataColumn
            Get
                Return Me.columntelefon
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As partneriRow
            Get
                Return CType(Me.Rows(index),partneriRow)
            End Get
        End Property
        
        Public Event partneriRowChanging As partneriRowChangeEventHandler
        
        Public Event partneriRowChanged As partneriRowChangeEventHandler
        
        Public Event partneriRowDeleting As partneriRowChangeEventHandler
        
        Public Event partneriRowDeleted As partneriRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpartneriRow(ByVal row As partneriRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpartneriRow(ByVal sifra As String, ByVal naziv As String, ByVal adresa As String, ByVal mesto As String, ByVal pib As String, ByVal maticni As String, ByVal registarski As String, ByVal zr As String, ByVal telefon As String) As partneriRow
            Dim rowpartneriRow As partneriRow = CType(Me.NewRow,partneriRow)
            rowpartneriRow.ItemArray = New Object() {Nothing, sifra, naziv, adresa, mesto, pib, maticni, registarski, zr, telefon}
            Me.Rows.Add(rowpartneriRow)
            Return rowpartneriRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid_partner(ByVal id_partner As Integer) As partneriRow
            Return CType(Me.Rows.Find(New Object() {id_partner}),partneriRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As partneriDataTable = CType(MyBase.Clone,partneriDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New partneriDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid_partner = MyBase.Columns("id_partner")
            Me.columnsifra = MyBase.Columns("sifra")
            Me.columnnaziv = MyBase.Columns("naziv")
            Me.columnadresa = MyBase.Columns("adresa")
            Me.columnmesto = MyBase.Columns("mesto")
            Me.columnpib = MyBase.Columns("pib")
            Me.columnmaticni = MyBase.Columns("maticni")
            Me.columnregistarski = MyBase.Columns("registarski")
            Me.columnzr = MyBase.Columns("zr")
            Me.columntelefon = MyBase.Columns("telefon")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid_partner = New System.Data.DataColumn("id_partner", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_partner)
            Me.columnsifra = New System.Data.DataColumn("sifra", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsifra)
            Me.columnnaziv = New System.Data.DataColumn("naziv", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnaziv)
            Me.columnadresa = New System.Data.DataColumn("adresa", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadresa)
            Me.columnmesto = New System.Data.DataColumn("mesto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmesto)
            Me.columnpib = New System.Data.DataColumn("pib", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpib)
            Me.columnmaticni = New System.Data.DataColumn("maticni", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaticni)
            Me.columnregistarski = New System.Data.DataColumn("registarski", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistarski)
            Me.columnzr = New System.Data.DataColumn("zr", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzr)
            Me.columntelefon = New System.Data.DataColumn("telefon", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelefon)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnid_partner}, true))
            Me.columnid_partner.AutoIncrement = true
            Me.columnid_partner.AllowDBNull = false
            Me.columnid_partner.ReadOnly = true
            Me.columnid_partner.Unique = true
            Me.columnsifra.MaxLength = 10
            Me.columnnaziv.MaxLength = 100
            Me.columnadresa.MaxLength = 100
            Me.columnmesto.MaxLength = 50
            Me.columnpib.MaxLength = 20
            Me.columnmaticni.MaxLength = 15
            Me.columnregistarski.MaxLength = 15
            Me.columnzr.MaxLength = 30
            Me.columntelefon.MaxLength = 30
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpartneriRow() As partneriRow
            Return CType(Me.NewRow,partneriRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New partneriRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(partneriRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partneriRowChangedEvent) Is Nothing) Then
                RaiseEvent partneriRowChanged(Me, New partneriRowChangeEvent(CType(e.Row,partneriRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partneriRowChangingEvent) Is Nothing) Then
                RaiseEvent partneriRowChanging(Me, New partneriRowChangeEvent(CType(e.Row,partneriRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partneriRowDeletedEvent) Is Nothing) Then
                RaiseEvent partneriRowDeleted(Me, New partneriRowChangeEvent(CType(e.Row,partneriRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partneriRowDeletingEvent) Is Nothing) Then
                RaiseEvent partneriRowDeleting(Me, New partneriRowChangeEvent(CType(e.Row,partneriRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepartneriRow(ByVal row As partneriRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As farmaDataSet = New farmaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "partneriDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class pdvDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_pdv As System.Data.DataColumn
        
        Private columnsifra As System.Data.DataColumn
        
        Private columnopis As System.Data.DataColumn
        
        Private columnstopa As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "pdv"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_pdvColumn() As System.Data.DataColumn
            Get
                Return Me.columnid_pdv
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sifraColumn() As System.Data.DataColumn
            Get
                Return Me.columnsifra
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property opisColumn() As System.Data.DataColumn
            Get
                Return Me.columnopis
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stopaColumn() As System.Data.DataColumn
            Get
                Return Me.columnstopa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As pdvRow
            Get
                Return CType(Me.Rows(index),pdvRow)
            End Get
        End Property
        
        Public Event pdvRowChanging As pdvRowChangeEventHandler
        
        Public Event pdvRowChanged As pdvRowChangeEventHandler
        
        Public Event pdvRowDeleting As pdvRowChangeEventHandler
        
        Public Event pdvRowDeleted As pdvRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpdvRow(ByVal row As pdvRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpdvRow(ByVal sifra As Integer, ByVal opis As String, ByVal stopa As Integer) As pdvRow
            Dim rowpdvRow As pdvRow = CType(Me.NewRow,pdvRow)
            rowpdvRow.ItemArray = New Object() {Nothing, sifra, opis, stopa}
            Me.Rows.Add(rowpdvRow)
            Return rowpdvRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid_pdv(ByVal id_pdv As Integer) As pdvRow
            Return CType(Me.Rows.Find(New Object() {id_pdv}),pdvRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As pdvDataTable = CType(MyBase.Clone,pdvDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New pdvDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid_pdv = MyBase.Columns("id_pdv")
            Me.columnsifra = MyBase.Columns("sifra")
            Me.columnopis = MyBase.Columns("opis")
            Me.columnstopa = MyBase.Columns("stopa")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid_pdv = New System.Data.DataColumn("id_pdv", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_pdv)
            Me.columnsifra = New System.Data.DataColumn("sifra", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsifra)
            Me.columnopis = New System.Data.DataColumn("opis", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnopis)
            Me.columnstopa = New System.Data.DataColumn("stopa", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstopa)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnid_pdv}, true))
            Me.columnid_pdv.AutoIncrement = true
            Me.columnid_pdv.AllowDBNull = false
            Me.columnid_pdv.ReadOnly = true
            Me.columnid_pdv.Unique = true
            Me.columnopis.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpdvRow() As pdvRow
            Return CType(Me.NewRow,pdvRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New pdvRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pdvRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pdvRowChangedEvent) Is Nothing) Then
                RaiseEvent pdvRowChanged(Me, New pdvRowChangeEvent(CType(e.Row,pdvRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pdvRowChangingEvent) Is Nothing) Then
                RaiseEvent pdvRowChanging(Me, New pdvRowChangeEvent(CType(e.Row,pdvRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pdvRowDeletedEvent) Is Nothing) Then
                RaiseEvent pdvRowDeleted(Me, New pdvRowChangeEvent(CType(e.Row,pdvRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pdvRowDeletingEvent) Is Nothing) Then
                RaiseEvent pdvRowDeleting(Me, New pdvRowChangeEvent(CType(e.Row,pdvRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepdvRow(ByVal row As pdvRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As farmaDataSet = New farmaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pdvDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class robaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_roba As System.Data.DataColumn
        
        Private columnsifra As System.Data.DataColumn
        
        Private columnsifra_opis As System.Data.DataColumn
        
        Private columnnaziv As System.Data.DataColumn
        
        Private columnjm As System.Data.DataColumn
        
        Private columnnabavna As System.Data.DataColumn
        
        Private columnnabavna_euro As System.Data.DataColumn
        
        Private columnrabat As System.Data.DataColumn
        
        Private columnpdv As System.Data.DataColumn
        
        Private columncena As System.Data.DataColumn
        
        Private columneuro As System.Data.DataColumn
        
        Private columnkolicina As System.Data.DataColumn
        
        Private columnmarza As System.Data.DataColumn
        
        Private columnmin_kolicina As System.Data.DataColumn
        
        Private columnkategorija As System.Data.DataColumn
        
        Private columnbod As System.Data.DataColumn
        
        Private columnbod_cena As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "roba"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_robaColumn() As System.Data.DataColumn
            Get
                Return Me.columnid_roba
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sifraColumn() As System.Data.DataColumn
            Get
                Return Me.columnsifra
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sifra_opisColumn() As System.Data.DataColumn
            Get
                Return Me.columnsifra_opis
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nazivColumn() As System.Data.DataColumn
            Get
                Return Me.columnnaziv
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jmColumn() As System.Data.DataColumn
            Get
                Return Me.columnjm
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nabavnaColumn() As System.Data.DataColumn
            Get
                Return Me.columnnabavna
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nabavna_euroColumn() As System.Data.DataColumn
            Get
                Return Me.columnnabavna_euro
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rabatColumn() As System.Data.DataColumn
            Get
                Return Me.columnrabat
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pdvColumn() As System.Data.DataColumn
            Get
                Return Me.columnpdv
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cenaColumn() As System.Data.DataColumn
            Get
                Return Me.columncena
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property euroColumn() As System.Data.DataColumn
            Get
                Return Me.columneuro
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kolicinaColumn() As System.Data.DataColumn
            Get
                Return Me.columnkolicina
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property marzaColumn() As System.Data.DataColumn
            Get
                Return Me.columnmarza
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property min_kolicinaColumn() As System.Data.DataColumn
            Get
                Return Me.columnmin_kolicina
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kategorijaColumn() As System.Data.DataColumn
            Get
                Return Me.columnkategorija
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bodColumn() As System.Data.DataColumn
            Get
                Return Me.columnbod
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property bod_cenaColumn() As System.Data.DataColumn
            Get
                Return Me.columnbod_cena
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As robaRow
            Get
                Return CType(Me.Rows(index),robaRow)
            End Get
        End Property
        
        Public Event robaRowChanging As robaRowChangeEventHandler
        
        Public Event robaRowChanged As robaRowChangeEventHandler
        
        Public Event robaRowDeleting As robaRowChangeEventHandler
        
        Public Event robaRowDeleted As robaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddrobaRow(ByVal row As robaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddrobaRow( _
                    ByVal sifra As String,  _
                    ByVal sifra_opis As String,  _
                    ByVal naziv As String,  _
                    ByVal jm As String,  _
                    ByVal nabavna As Decimal,  _
                    ByVal nabavna_euro As Decimal,  _
                    ByVal rabat As Decimal,  _
                    ByVal pdv As Integer,  _
                    ByVal cena As Decimal,  _
                    ByVal euro As Decimal,  _
                    ByVal kolicina As Decimal,  _
                    ByVal marza As Decimal,  _
                    ByVal min_kolicina As Decimal,  _
                    ByVal kategorija As String,  _
                    ByVal bod As Boolean,  _
                    ByVal bod_cena As Decimal) As robaRow
            Dim rowrobaRow As robaRow = CType(Me.NewRow,robaRow)
            rowrobaRow.ItemArray = New Object() {Nothing, sifra, sifra_opis, naziv, jm, nabavna, nabavna_euro, rabat, pdv, cena, euro, kolicina, marza, min_kolicina, kategorija, bod, bod_cena}
            Me.Rows.Add(rowrobaRow)
            Return rowrobaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid_roba(ByVal id_roba As Integer) As robaRow
            Return CType(Me.Rows.Find(New Object() {id_roba}),robaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As robaDataTable = CType(MyBase.Clone,robaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New robaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid_roba = MyBase.Columns("id_roba")
            Me.columnsifra = MyBase.Columns("sifra")
            Me.columnsifra_opis = MyBase.Columns("sifra_opis")
            Me.columnnaziv = MyBase.Columns("naziv")
            Me.columnjm = MyBase.Columns("jm")
            Me.columnnabavna = MyBase.Columns("nabavna")
            Me.columnnabavna_euro = MyBase.Columns("nabavna_euro")
            Me.columnrabat = MyBase.Columns("rabat")
            Me.columnpdv = MyBase.Columns("pdv")
            Me.columncena = MyBase.Columns("cena")
            Me.columneuro = MyBase.Columns("euro")
            Me.columnkolicina = MyBase.Columns("kolicina")
            Me.columnmarza = MyBase.Columns("marza")
            Me.columnmin_kolicina = MyBase.Columns("min_kolicina")
            Me.columnkategorija = MyBase.Columns("kategorija")
            Me.columnbod = MyBase.Columns("bod")
            Me.columnbod_cena = MyBase.Columns("bod_cena")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid_roba = New System.Data.DataColumn("id_roba", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_roba)
            Me.columnsifra = New System.Data.DataColumn("sifra", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsifra)
            Me.columnsifra_opis = New System.Data.DataColumn("sifra_opis", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsifra_opis)
            Me.columnnaziv = New System.Data.DataColumn("naziv", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnaziv)
            Me.columnjm = New System.Data.DataColumn("jm", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjm)
            Me.columnnabavna = New System.Data.DataColumn("nabavna", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnabavna)
            Me.columnnabavna_euro = New System.Data.DataColumn("nabavna_euro", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnabavna_euro)
            Me.columnrabat = New System.Data.DataColumn("rabat", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrabat)
            Me.columnpdv = New System.Data.DataColumn("pdv", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpdv)
            Me.columncena = New System.Data.DataColumn("cena", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncena)
            Me.columneuro = New System.Data.DataColumn("euro", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneuro)
            Me.columnkolicina = New System.Data.DataColumn("kolicina", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkolicina)
            Me.columnmarza = New System.Data.DataColumn("marza", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmarza)
            Me.columnmin_kolicina = New System.Data.DataColumn("min_kolicina", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmin_kolicina)
            Me.columnkategorija = New System.Data.DataColumn("kategorija", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkategorija)
            Me.columnbod = New System.Data.DataColumn("bod", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbod)
            Me.columnbod_cena = New System.Data.DataColumn("bod_cena", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbod_cena)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnid_roba}, true))
            Me.columnid_roba.AutoIncrement = true
            Me.columnid_roba.AllowDBNull = false
            Me.columnid_roba.ReadOnly = true
            Me.columnid_roba.Unique = true
            Me.columnsifra.MaxLength = 10
            Me.columnsifra_opis.MaxLength = 50
            Me.columnnaziv.MaxLength = 500
            Me.columnjm.MaxLength = 5
            Me.columnkategorija.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewrobaRow() As robaRow
            Return CType(Me.NewRow,robaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New robaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(robaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.robaRowChangedEvent) Is Nothing) Then
                RaiseEvent robaRowChanged(Me, New robaRowChangeEvent(CType(e.Row,robaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.robaRowChangingEvent) Is Nothing) Then
                RaiseEvent robaRowChanging(Me, New robaRowChangeEvent(CType(e.Row,robaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.robaRowDeletedEvent) Is Nothing) Then
                RaiseEvent robaRowDeleted(Me, New robaRowChangeEvent(CType(e.Row,robaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.robaRowDeletingEvent) Is Nothing) Then
                RaiseEvent robaRowDeleting(Me, New robaRowChangeEvent(CType(e.Row,robaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoverobaRow(ByVal row As robaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As farmaDataSet = New farmaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "robaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class kontaRow
        Inherits System.Data.DataRow
        
        Private tablekonta As kontaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablekonta = CType(Me.Table,kontaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_konto() As Integer
            Get
                Return CType(Me(Me.tablekonta.id_kontoColumn),Integer)
            End Get
            Set
                Me(Me.tablekonta.id_kontoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property konto() As String
            Get
                Try 
                    Return CType(Me(Me.tablekonta.kontoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'konto' in table 'konta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekonta.kontoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property naziv() As String
            Get
                Try 
                    Return CType(Me(Me.tablekonta.nazivColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'naziv' in table 'konta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekonta.nazivColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dozvoljeno_knjizenje() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablekonta.dozvoljeno_knjizenjeColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'dozvoljeno_knjizenje' in table 'konta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekonta.dozvoljeno_knjizenjeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property devizni() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablekonta.devizniColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'devizni' in table 'konta' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekonta.devizniColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskontoNull() As Boolean
            Return Me.IsNull(Me.tablekonta.kontoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkontoNull()
            Me(Me.tablekonta.kontoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnazivNull() As Boolean
            Return Me.IsNull(Me.tablekonta.nazivColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnazivNull()
            Me(Me.tablekonta.nazivColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdozvoljeno_knjizenjeNull() As Boolean
            Return Me.IsNull(Me.tablekonta.dozvoljeno_knjizenjeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdozvoljeno_knjizenjeNull()
            Me(Me.tablekonta.dozvoljeno_knjizenjeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdevizniNull() As Boolean
            Return Me.IsNull(Me.tablekonta.devizniColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdevizniNull()
            Me(Me.tablekonta.devizniColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class odlozenoRow
        Inherits System.Data.DataRow
        
        Private tableodlozeno As odlozenoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableodlozeno = CType(Me.Table,odlozenoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_odlozeno() As Integer
            Get
                Return CType(Me(Me.tableodlozeno.id_odlozenoColumn),Integer)
            End Get
            Set
                Me(Me.tableodlozeno.id_odlozenoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sifra() As String
            Get
                Try 
                    Return CType(Me(Me.tableodlozeno.sifraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'sifra' in table 'odlozeno' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableodlozeno.sifraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property opis() As String
            Get
                Try 
                    Return CType(Me(Me.tableodlozeno.opisColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'opis' in table 'odlozeno' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableodlozeno.opisColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property odlozeno() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableodlozeno.odlozenoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'odlozeno' in table 'odlozeno' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableodlozeno.odlozenoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssifraNull() As Boolean
            Return Me.IsNull(Me.tableodlozeno.sifraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsifraNull()
            Me(Me.tableodlozeno.sifraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsopisNull() As Boolean
            Return Me.IsNull(Me.tableodlozeno.opisColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetopisNull()
            Me(Me.tableodlozeno.opisColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsodlozenoNull() As Boolean
            Return Me.IsNull(Me.tableodlozeno.odlozenoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetodlozenoNull()
            Me(Me.tableodlozeno.odlozenoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class partneriRow
        Inherits System.Data.DataRow
        
        Private tablepartneri As partneriDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartneri = CType(Me.Table,partneriDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_partner() As Integer
            Get
                Return CType(Me(Me.tablepartneri.id_partnerColumn),Integer)
            End Get
            Set
                Me(Me.tablepartneri.id_partnerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sifra() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartneri.sifraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'sifra' in table 'partneri' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartneri.sifraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property naziv() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartneri.nazivColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'naziv' in table 'partneri' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartneri.nazivColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property adresa() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartneri.adresaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'adresa' in table 'partneri' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartneri.adresaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mesto() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartneri.mestoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'mesto' in table 'partneri' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartneri.mestoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pib() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartneri.pibColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'pib' in table 'partneri' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartneri.pibColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property maticni() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartneri.maticniColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'maticni' in table 'partneri' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartneri.maticniColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registarski() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartneri.registarskiColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'registarski' in table 'partneri' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartneri.registarskiColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property zr() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartneri.zrColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'zr' in table 'partneri' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartneri.zrColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property telefon() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartneri.telefonColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'telefon' in table 'partneri' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartneri.telefonColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssifraNull() As Boolean
            Return Me.IsNull(Me.tablepartneri.sifraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsifraNull()
            Me(Me.tablepartneri.sifraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnazivNull() As Boolean
            Return Me.IsNull(Me.tablepartneri.nazivColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnazivNull()
            Me(Me.tablepartneri.nazivColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsadresaNull() As Boolean
            Return Me.IsNull(Me.tablepartneri.adresaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetadresaNull()
            Me(Me.tablepartneri.adresaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmestoNull() As Boolean
            Return Me.IsNull(Me.tablepartneri.mestoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmestoNull()
            Me(Me.tablepartneri.mestoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspibNull() As Boolean
            Return Me.IsNull(Me.tablepartneri.pibColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpibNull()
            Me(Me.tablepartneri.pibColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmaticniNull() As Boolean
            Return Me.IsNull(Me.tablepartneri.maticniColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmaticniNull()
            Me(Me.tablepartneri.maticniColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregistarskiNull() As Boolean
            Return Me.IsNull(Me.tablepartneri.registarskiColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregistarskiNull()
            Me(Me.tablepartneri.registarskiColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IszrNull() As Boolean
            Return Me.IsNull(Me.tablepartneri.zrColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetzrNull()
            Me(Me.tablepartneri.zrColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstelefonNull() As Boolean
            Return Me.IsNull(Me.tablepartneri.telefonColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettelefonNull()
            Me(Me.tablepartneri.telefonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pdvRow
        Inherits System.Data.DataRow
        
        Private tablepdv As pdvDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepdv = CType(Me.Table,pdvDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_pdv() As Integer
            Get
                Return CType(Me(Me.tablepdv.id_pdvColumn),Integer)
            End Get
            Set
                Me(Me.tablepdv.id_pdvColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sifra() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepdv.sifraColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'sifra' in table 'pdv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepdv.sifraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property opis() As String
            Get
                Try 
                    Return CType(Me(Me.tablepdv.opisColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'opis' in table 'pdv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepdv.opisColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stopa() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepdv.stopaColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'stopa' in table 'pdv' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepdv.stopaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssifraNull() As Boolean
            Return Me.IsNull(Me.tablepdv.sifraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsifraNull()
            Me(Me.tablepdv.sifraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsopisNull() As Boolean
            Return Me.IsNull(Me.tablepdv.opisColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetopisNull()
            Me(Me.tablepdv.opisColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstopaNull() As Boolean
            Return Me.IsNull(Me.tablepdv.stopaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstopaNull()
            Me(Me.tablepdv.stopaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class robaRow
        Inherits System.Data.DataRow
        
        Private tableroba As robaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableroba = CType(Me.Table,robaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_roba() As Integer
            Get
                Return CType(Me(Me.tableroba.id_robaColumn),Integer)
            End Get
            Set
                Me(Me.tableroba.id_robaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sifra() As String
            Get
                Try 
                    Return CType(Me(Me.tableroba.sifraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'sifra' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.sifraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sifra_opis() As String
            Get
                Try 
                    Return CType(Me(Me.tableroba.sifra_opisColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'sifra_opis' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.sifra_opisColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property naziv() As String
            Get
                Try 
                    Return CType(Me(Me.tableroba.nazivColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'naziv' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.nazivColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jm() As String
            Get
                Try 
                    Return CType(Me(Me.tableroba.jmColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'jm' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.jmColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nabavna() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableroba.nabavnaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nabavna' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.nabavnaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nabavna_euro() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableroba.nabavna_euroColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nabavna_euro' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.nabavna_euroColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rabat() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableroba.rabatColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'rabat' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.rabatColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pdv() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableroba.pdvColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'pdv' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.pdvColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cena() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableroba.cenaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'cena' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.cenaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property euro() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableroba.euroColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'euro' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.euroColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kolicina() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableroba.kolicinaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'kolicina' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.kolicinaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property marza() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableroba.marzaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'marza' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.marzaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property min_kolicina() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableroba.min_kolicinaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'min_kolicina' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.min_kolicinaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kategorija() As String
            Get
                Try 
                    Return CType(Me(Me.tableroba.kategorijaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'kategorija' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.kategorijaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bod() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableroba.bodColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'bod' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.bodColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bod_cena() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableroba.bod_cenaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'bod_cena' in table 'roba' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableroba.bod_cenaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssifraNull() As Boolean
            Return Me.IsNull(Me.tableroba.sifraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsifraNull()
            Me(Me.tableroba.sifraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issifra_opisNull() As Boolean
            Return Me.IsNull(Me.tableroba.sifra_opisColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsifra_opisNull()
            Me(Me.tableroba.sifra_opisColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnazivNull() As Boolean
            Return Me.IsNull(Me.tableroba.nazivColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnazivNull()
            Me(Me.tableroba.nazivColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjmNull() As Boolean
            Return Me.IsNull(Me.tableroba.jmColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjmNull()
            Me(Me.tableroba.jmColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnabavnaNull() As Boolean
            Return Me.IsNull(Me.tableroba.nabavnaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnabavnaNull()
            Me(Me.tableroba.nabavnaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnabavna_euroNull() As Boolean
            Return Me.IsNull(Me.tableroba.nabavna_euroColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnabavna_euroNull()
            Me(Me.tableroba.nabavna_euroColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrabatNull() As Boolean
            Return Me.IsNull(Me.tableroba.rabatColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrabatNull()
            Me(Me.tableroba.rabatColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspdvNull() As Boolean
            Return Me.IsNull(Me.tableroba.pdvColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpdvNull()
            Me(Me.tableroba.pdvColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscenaNull() As Boolean
            Return Me.IsNull(Me.tableroba.cenaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcenaNull()
            Me(Me.tableroba.cenaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseuroNull() As Boolean
            Return Me.IsNull(Me.tableroba.euroColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteuroNull()
            Me(Me.tableroba.euroColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskolicinaNull() As Boolean
            Return Me.IsNull(Me.tableroba.kolicinaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkolicinaNull()
            Me(Me.tableroba.kolicinaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmarzaNull() As Boolean
            Return Me.IsNull(Me.tableroba.marzaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmarzaNull()
            Me(Me.tableroba.marzaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismin_kolicinaNull() As Boolean
            Return Me.IsNull(Me.tableroba.min_kolicinaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmin_kolicinaNull()
            Me(Me.tableroba.min_kolicinaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskategorijaNull() As Boolean
            Return Me.IsNull(Me.tableroba.kategorijaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkategorijaNull()
            Me(Me.tableroba.kategorijaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbodNull() As Boolean
            Return Me.IsNull(Me.tableroba.bodColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbodNull()
            Me(Me.tableroba.bodColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isbod_cenaNull() As Boolean
            Return Me.IsNull(Me.tableroba.bod_cenaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setbod_cenaNull()
            Me(Me.tableroba.bod_cenaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class kontaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As kontaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As kontaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As kontaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class odlozenoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As odlozenoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As odlozenoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As odlozenoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class partneriRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As partneriRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As partneriRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As partneriRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pdvRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As pdvRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pdvRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pdvRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class robaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As robaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As robaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As robaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace farmaDataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class kontaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "konta"
            tableMapping.ColumnMappings.Add("id_konto", "id_konto")
            tableMapping.ColumnMappings.Add("konto", "konto")
            tableMapping.ColumnMappings.Add("naziv", "naziv")
            tableMapping.ColumnMappings.Add("dozvoljeno_knjizenje", "dozvoljeno_knjizenje")
            tableMapping.ColumnMappings.Add("devizni", "devizni")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[konta] WHERE (([id_konto] = @Original_id_konto) AND ((@IsNull_"& _ 
                "konto = 1 AND [konto] IS NULL) OR ([konto] = @Original_konto)) AND ((@IsNull_naz"& _ 
                "iv = 1 AND [naziv] IS NULL) OR ([naziv] = @Original_naziv)) AND ((@IsNull_dozvol"& _ 
                "jeno_knjizenje = 1 AND [dozvoljeno_knjizenje] IS NULL) OR ([dozvoljeno_knjizenje"& _ 
                "] = @Original_dozvoljeno_knjizenje)) AND ((@IsNull_devizni = 1 AND [devizni] IS "& _ 
                "NULL) OR ([devizni] = @Original_devizni)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_konto", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_konto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_konto", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "konto", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_konto", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "konto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_naziv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_dozvoljeno_knjizenje", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dozvoljeno_knjizenje", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_dozvoljeno_knjizenje", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "dozvoljeno_knjizenje", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_devizni", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "devizni", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_devizni", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "devizni", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[konta] ([konto], [naziv], [dozvoljeno_knjizenje], [devizni]) V"& _ 
                "ALUES (@konto, @naziv, @dozvoljeno_knjizenje, @devizni);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_konto, konto"& _ 
                ", naziv, dozvoljeno_knjizenje, devizni FROM konta WHERE (id_konto = SCOPE_IDENTI"& _ 
                "TY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@konto", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "konto", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@dozvoljeno_knjizenje", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "dozvoljeno_knjizenje", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@devizni", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "devizni", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[konta] SET [konto] = @konto, [naziv] = @naziv, [dozvoljeno_knjizenj"& _ 
                "e] = @dozvoljeno_knjizenje, [devizni] = @devizni WHERE (([id_konto] = @Original_"& _ 
                "id_konto) AND ((@IsNull_konto = 1 AND [konto] IS NULL) OR ([konto] = @Original_k"& _ 
                "onto)) AND ((@IsNull_naziv = 1 AND [naziv] IS NULL) OR ([naziv] = @Original_nazi"& _ 
                "v)) AND ((@IsNull_dozvoljeno_knjizenje = 1 AND [dozvoljeno_knjizenje] IS NULL) O"& _ 
                "R ([dozvoljeno_knjizenje] = @Original_dozvoljeno_knjizenje)) AND ((@IsNull_deviz"& _ 
                "ni = 1 AND [devizni] IS NULL) OR ([devizni] = @Original_devizni)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_k"& _ 
                "onto, konto, naziv, dozvoljeno_knjizenje, devizni FROM konta WHERE (id_konto = @"& _ 
                "id_konto)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@konto", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "konto", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@dozvoljeno_knjizenje", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "dozvoljeno_knjizenje", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@devizni", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "devizni", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_konto", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_konto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_konto", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "konto", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_konto", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "konto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_naziv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_dozvoljeno_knjizenje", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "dozvoljeno_knjizenje", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_dozvoljeno_knjizenje", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "dozvoljeno_knjizenje", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_devizni", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "devizni", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_devizni", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "devizni", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@id_konto", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "id_konto", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Farma.My.MySettings.Default.farmaConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_konto, konto, naziv, dozvoljeno_knjizenje, devizni FROM dbo.fn_konta"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As farmaDataSet.kontaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As farmaDataSet.kontaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As farmaDataSet.kontaDataTable = New farmaDataSet.kontaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As farmaDataSet.kontaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As farmaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "konta")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_konto As Integer, ByVal Original_konto As String, ByVal Original_naziv As String, ByVal Original_dozvoljeno_knjizenje As System.Nullable(Of Boolean), ByVal Original_devizni As System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_konto,Integer)
            If (Original_konto Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_konto,String)
            End If
            If (Original_naziv Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_naziv,String)
            End If
            If (Original_dozvoljeno_knjizenje.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_dozvoljeno_knjizenje.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_devizni.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_devizni.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal konto As String, ByVal naziv As String, ByVal dozvoljeno_knjizenje As System.Nullable(Of Boolean), ByVal devizni As System.Nullable(Of Boolean)) As Integer
            If (konto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(konto,String)
            End If
            If (naziv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(naziv,String)
            End If
            If (dozvoljeno_knjizenje.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(dozvoljeno_knjizenje.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (devizni.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(devizni.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal konto As String, ByVal naziv As String, ByVal dozvoljeno_knjizenje As System.Nullable(Of Boolean), ByVal devizni As System.Nullable(Of Boolean), ByVal Original_id_konto As Integer, ByVal Original_konto As String, ByVal Original_naziv As String, ByVal Original_dozvoljeno_knjizenje As System.Nullable(Of Boolean), ByVal Original_devizni As System.Nullable(Of Boolean), ByVal id_konto As Integer) As Integer
            If (konto Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(konto,String)
            End If
            If (naziv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(naziv,String)
            End If
            If (dozvoljeno_knjizenje.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(dozvoljeno_knjizenje.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (devizni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(devizni.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_id_konto,Integer)
            If (Original_konto Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_konto,String)
            End If
            If (Original_naziv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_naziv,String)
            End If
            If (Original_dozvoljeno_knjizenje.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_dozvoljeno_knjizenje.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_devizni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_devizni.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(id_konto,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class odlozenoTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "odlozeno"
            tableMapping.ColumnMappings.Add("id_odlozeno", "id_odlozeno")
            tableMapping.ColumnMappings.Add("sifra", "sifra")
            tableMapping.ColumnMappings.Add("opis", "opis")
            tableMapping.ColumnMappings.Add("odlozeno", "odlozeno")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[odlozeno] WHERE (([id_odlozeno] = @Original_id_odlozeno) AND ("& _ 
                "(@IsNull_sifra = 1 AND [sifra] IS NULL) OR ([sifra] = @Original_sifra)) AND ((@I"& _ 
                "sNull_opis = 1 AND [opis] IS NULL) OR ([opis] = @Original_opis)) AND ((@IsNull_o"& _ 
                "dlozeno = 1 AND [odlozeno] IS NULL) OR ([odlozeno] = @Original_odlozeno)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_odlozeno", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_odlozeno", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_opis", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_odlozeno", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "odlozeno", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_odlozeno", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "odlozeno", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[odlozeno] ([sifra], [opis], [odlozeno]) VALUES (@sifra, @opis,"& _ 
                " @odlozeno);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_odlozeno, sifra, opis, odlozeno FROM odlozeno WHERE (id_"& _ 
                "odlozeno = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@odlozeno", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "odlozeno", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[odlozeno] SET [sifra] = @sifra, [opis] = @opis, [odlozeno] = @odloz"& _ 
                "eno WHERE (([id_odlozeno] = @Original_id_odlozeno) AND ((@IsNull_sifra = 1 AND ["& _ 
                "sifra] IS NULL) OR ([sifra] = @Original_sifra)) AND ((@IsNull_opis = 1 AND [opis"& _ 
                "] IS NULL) OR ([opis] = @Original_opis)) AND ((@IsNull_odlozeno = 1 AND [odlozen"& _ 
                "o] IS NULL) OR ([odlozeno] = @Original_odlozeno)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_odlozeno, sifra, "& _ 
                "opis, odlozeno FROM odlozeno WHERE (id_odlozeno = @id_odlozeno)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@odlozeno", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "odlozeno", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_odlozeno", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_odlozeno", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_opis", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_odlozeno", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "odlozeno", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_odlozeno", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "odlozeno", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@id_odlozeno", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "id_odlozeno", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Farma.My.MySettings.Default.farmaConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_odlozeno, sifra, opis, odlozeno FROM dbo.app_odlozeno"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As farmaDataSet.odlozenoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As farmaDataSet.odlozenoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As farmaDataSet.odlozenoDataTable = New farmaDataSet.odlozenoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As farmaDataSet.odlozenoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As farmaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "odlozeno")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_odlozeno As Integer, ByVal Original_sifra As String, ByVal Original_opis As String, ByVal Original_odlozeno As System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_odlozeno,Integer)
            If (Original_sifra Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_sifra,String)
            End If
            If (Original_opis Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_opis,String)
            End If
            If (Original_odlozeno.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_odlozeno.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal sifra As String, ByVal opis As String, ByVal odlozeno As System.Nullable(Of Integer)) As Integer
            If (sifra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(sifra,String)
            End If
            If (opis Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(opis,String)
            End If
            If (odlozeno.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(odlozeno.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal sifra As String, ByVal opis As String, ByVal odlozeno As System.Nullable(Of Integer), ByVal Original_id_odlozeno As Integer, ByVal Original_sifra As String, ByVal Original_opis As String, ByVal Original_odlozeno As System.Nullable(Of Integer), ByVal id_odlozeno As Integer) As Integer
            If (sifra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sifra,String)
            End If
            If (opis Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(opis,String)
            End If
            If (odlozeno.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(odlozeno.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_id_odlozeno,Integer)
            If (Original_sifra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_sifra,String)
            End If
            If (Original_opis Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_opis,String)
            End If
            If (Original_odlozeno.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_odlozeno.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(id_odlozeno,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class partneriTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "partneri"
            tableMapping.ColumnMappings.Add("id_partner", "id_partner")
            tableMapping.ColumnMappings.Add("sifra", "sifra")
            tableMapping.ColumnMappings.Add("naziv", "naziv")
            tableMapping.ColumnMappings.Add("adresa", "adresa")
            tableMapping.ColumnMappings.Add("mesto", "mesto")
            tableMapping.ColumnMappings.Add("pib", "pib")
            tableMapping.ColumnMappings.Add("maticni", "maticni")
            tableMapping.ColumnMappings.Add("registarski", "registarski")
            tableMapping.ColumnMappings.Add("zr", "zr")
            tableMapping.ColumnMappings.Add("telefon", "telefon")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[partneri] WHERE (([id_partner] = @Original_id_partner) AND ((@"& _ 
                "IsNull_sifra = 1 AND [sifra] IS NULL) OR ([sifra] = @Original_sifra)) AND ((@IsN"& _ 
                "ull_naziv = 1 AND [naziv] IS NULL) OR ([naziv] = @Original_naziv)) AND ((@IsNull"& _ 
                "_adresa = 1 AND [adresa] IS NULL) OR ([adresa] = @Original_adresa)) AND ((@IsNul"& _ 
                "l_mesto = 1 AND [mesto] IS NULL) OR ([mesto] = @Original_mesto)) AND ((@IsNull_p"& _ 
                "ib = 1 AND [pib] IS NULL) OR ([pib] = @Original_pib)) AND ((@IsNull_maticni = 1 "& _ 
                "AND [maticni] IS NULL) OR ([maticni] = @Original_maticni)) AND ((@IsNull_regista"& _ 
                "rski = 1 AND [registarski] IS NULL) OR ([registarski] = @Original_registarski)) "& _ 
                "AND ((@IsNull_zr = 1 AND [zr] IS NULL) OR ([zr] = @Original_zr)) AND ((@IsNull_t"& _ 
                "elefon = 1 AND [telefon] IS NULL) OR ([telefon] = @Original_telefon)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_partner", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_partner", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_naziv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_adresa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "adresa", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_adresa", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "adresa", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_mesto", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "mesto", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_mesto", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "mesto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_pib", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pib", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pib", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "pib", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_maticni", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "maticni", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_maticni", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "maticni", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_registarski", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "registarski", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_registarski", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "registarski", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_zr", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zr", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_zr", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zr", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_telefon", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "telefon", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_telefon", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefon", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[partneri] ([sifra], [naziv], [adresa], [mesto], [pib], [maticn"& _ 
                "i], [registarski], [zr], [telefon]) VALUES (@sifra, @naziv, @adresa, @mesto, @pi"& _ 
                "b, @maticni, @registarski, @zr, @telefon);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_partner, sifra, naziv, adr"& _ 
                "esa, mesto, pib, maticni, registarski, zr, telefon FROM partneri WHERE (id_partn"& _ 
                "er = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@adresa", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "adresa", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@mesto", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "mesto", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pib", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "pib", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@maticni", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "maticni", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@registarski", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "registarski", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@zr", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@telefon", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefon", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[partneri] SET [sifra] = @sifra, [naziv] = @naziv, [adresa] = @adres"& _ 
                "a, [mesto] = @mesto, [pib] = @pib, [maticni] = @maticni, [registarski] = @regist"& _ 
                "arski, [zr] = @zr, [telefon] = @telefon WHERE (([id_partner] = @Original_id_part"& _ 
                "ner) AND ((@IsNull_sifra = 1 AND [sifra] IS NULL) OR ([sifra] = @Original_sifra)"& _ 
                ") AND ((@IsNull_naziv = 1 AND [naziv] IS NULL) OR ([naziv] = @Original_naziv)) A"& _ 
                "ND ((@IsNull_adresa = 1 AND [adresa] IS NULL) OR ([adresa] = @Original_adresa)) "& _ 
                "AND ((@IsNull_mesto = 1 AND [mesto] IS NULL) OR ([mesto] = @Original_mesto)) AND"& _ 
                " ((@IsNull_pib = 1 AND [pib] IS NULL) OR ([pib] = @Original_pib)) AND ((@IsNull_"& _ 
                "maticni = 1 AND [maticni] IS NULL) OR ([maticni] = @Original_maticni)) AND ((@Is"& _ 
                "Null_registarski = 1 AND [registarski] IS NULL) OR ([registarski] = @Original_re"& _ 
                "gistarski)) AND ((@IsNull_zr = 1 AND [zr] IS NULL) OR ([zr] = @Original_zr)) AND"& _ 
                " ((@IsNull_telefon = 1 AND [telefon] IS NULL) OR ([telefon] = @Original_telefon)"& _ 
                "));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_partner, sifra, naziv, adresa, mesto, pib, maticni, registarski, "& _ 
                "zr, telefon FROM partneri WHERE (id_partner = @id_partner)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@adresa", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "adresa", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@mesto", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "mesto", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pib", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "pib", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@maticni", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "maticni", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@registarski", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "registarski", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@zr", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@telefon", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefon", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_partner", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_partner", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_naziv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_adresa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "adresa", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_adresa", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "adresa", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_mesto", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "mesto", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_mesto", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "mesto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_pib", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pib", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pib", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "pib", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_maticni", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "maticni", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_maticni", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "maticni", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_registarski", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "registarski", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_registarski", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "registarski", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_zr", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zr", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_zr", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zr", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_telefon", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "telefon", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_telefon", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefon", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@id_partner", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "id_partner", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Farma.My.MySettings.Default.farmaConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_partner, sifra, naziv, adresa, mesto, pib, maticni, registarski, zr, te"& _ 
                "lefon FROM dbo.app_partneri"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As farmaDataSet.partneriDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As farmaDataSet.partneriDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As farmaDataSet.partneriDataTable = New farmaDataSet.partneriDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As farmaDataSet.partneriDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As farmaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "partneri")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_partner As Integer, ByVal Original_sifra As String, ByVal Original_naziv As String, ByVal Original_adresa As String, ByVal Original_mesto As String, ByVal Original_pib As String, ByVal Original_maticni As String, ByVal Original_registarski As String, ByVal Original_zr As String, ByVal Original_telefon As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_partner,Integer)
            If (Original_sifra Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_sifra,String)
            End If
            If (Original_naziv Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_naziv,String)
            End If
            If (Original_adresa Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_adresa,String)
            End If
            If (Original_mesto Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_mesto,String)
            End If
            If (Original_pib Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_pib,String)
            End If
            If (Original_maticni Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_maticni,String)
            End If
            If (Original_registarski Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_registarski,String)
            End If
            If (Original_zr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_zr,String)
            End If
            If (Original_telefon Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_telefon,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal sifra As String, ByVal naziv As String, ByVal adresa As String, ByVal mesto As String, ByVal pib As String, ByVal maticni As String, ByVal registarski As String, ByVal zr As String, ByVal telefon As String) As Integer
            If (sifra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(sifra,String)
            End If
            If (naziv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(naziv,String)
            End If
            If (adresa Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(adresa,String)
            End If
            If (mesto Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(mesto,String)
            End If
            If (pib Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(pib,String)
            End If
            If (maticni Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(maticni,String)
            End If
            If (registarski Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(registarski,String)
            End If
            If (zr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(zr,String)
            End If
            If (telefon Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(telefon,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sifra As String,  _
                    ByVal naziv As String,  _
                    ByVal adresa As String,  _
                    ByVal mesto As String,  _
                    ByVal pib As String,  _
                    ByVal maticni As String,  _
                    ByVal registarski As String,  _
                    ByVal zr As String,  _
                    ByVal telefon As String,  _
                    ByVal Original_id_partner As Integer,  _
                    ByVal Original_sifra As String,  _
                    ByVal Original_naziv As String,  _
                    ByVal Original_adresa As String,  _
                    ByVal Original_mesto As String,  _
                    ByVal Original_pib As String,  _
                    ByVal Original_maticni As String,  _
                    ByVal Original_registarski As String,  _
                    ByVal Original_zr As String,  _
                    ByVal Original_telefon As String,  _
                    ByVal id_partner As Integer) As Integer
            If (sifra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sifra,String)
            End If
            If (naziv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(naziv,String)
            End If
            If (adresa Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(adresa,String)
            End If
            If (mesto Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(mesto,String)
            End If
            If (pib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(pib,String)
            End If
            If (maticni Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(maticni,String)
            End If
            If (registarski Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(registarski,String)
            End If
            If (zr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(zr,String)
            End If
            If (telefon Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(telefon,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_id_partner,Integer)
            If (Original_sifra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_sifra,String)
            End If
            If (Original_naziv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_naziv,String)
            End If
            If (Original_adresa Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_adresa,String)
            End If
            If (Original_mesto Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_mesto,String)
            End If
            If (Original_pib Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_pib,String)
            End If
            If (Original_maticni Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_maticni,String)
            End If
            If (Original_registarski Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_registarski,String)
            End If
            If (Original_zr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_zr,String)
            End If
            If (Original_telefon Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_telefon,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(id_partner,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class pdvTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "pdv"
            tableMapping.ColumnMappings.Add("id_pdv", "id_pdv")
            tableMapping.ColumnMappings.Add("sifra", "sifra")
            tableMapping.ColumnMappings.Add("opis", "opis")
            tableMapping.ColumnMappings.Add("stopa", "stopa")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[pdv] WHERE (([id_pdv] = @Original_id_pdv) AND ((@IsNull_sifra "& _ 
                "= 1 AND [sifra] IS NULL) OR ([sifra] = @Original_sifra)) AND ((@IsNull_opis = 1 "& _ 
                "AND [opis] IS NULL) OR ([opis] = @Original_opis)) AND ((@IsNull_stopa = 1 AND [s"& _ 
                "topa] IS NULL) OR ([stopa] = @Original_stopa)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_pdv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_pdv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_opis", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_stopa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stopa", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_stopa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stopa", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[pdv] ([sifra], [opis], [stopa]) VALUES (@sifra, @opis, @stopa)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_pdv, sifra, opis, stopa FROM pdv WHERE (id_pdv = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@stopa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stopa", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[pdv] SET [sifra] = @sifra, [opis] = @opis, [stopa] = @stopa WHERE ("& _ 
                "([id_pdv] = @Original_id_pdv) AND ((@IsNull_sifra = 1 AND [sifra] IS NULL) OR (["& _ 
                "sifra] = @Original_sifra)) AND ((@IsNull_opis = 1 AND [opis] IS NULL) OR ([opis]"& _ 
                " = @Original_opis)) AND ((@IsNull_stopa = 1 AND [stopa] IS NULL) OR ([stopa] = @"& _ 
                "Original_stopa)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_pdv, sifra, opis, stopa FROM pdv WHERE (id_pdv = @"& _ 
                "id_pdv)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@stopa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stopa", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_pdv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_pdv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_opis", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "opis", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_stopa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stopa", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_stopa", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "stopa", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@id_pdv", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "id_pdv", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Farma.My.MySettings.Default.farmaConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_pdv, sifra, opis, stopa FROM dbo.app_pdv"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As farmaDataSet.pdvDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As farmaDataSet.pdvDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As farmaDataSet.pdvDataTable = New farmaDataSet.pdvDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As farmaDataSet.pdvDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As farmaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "pdv")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_id_pdv As Integer, ByVal Original_sifra As System.Nullable(Of Integer), ByVal Original_opis As String, ByVal Original_stopa As System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_pdv,Integer)
            If (Original_sifra.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_sifra.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_opis Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_opis,String)
            End If
            If (Original_stopa.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_stopa.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal sifra As System.Nullable(Of Integer), ByVal opis As String, ByVal stopa As System.Nullable(Of Integer)) As Integer
            If (sifra.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(sifra.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (opis Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(opis,String)
            End If
            If (stopa.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(stopa.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal sifra As System.Nullable(Of Integer), ByVal opis As String, ByVal stopa As System.Nullable(Of Integer), ByVal Original_id_pdv As Integer, ByVal Original_sifra As System.Nullable(Of Integer), ByVal Original_opis As String, ByVal Original_stopa As System.Nullable(Of Integer), ByVal id_pdv As Integer) As Integer
            If (sifra.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sifra.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (opis Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(opis,String)
            End If
            If (stopa.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(stopa.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_id_pdv,Integer)
            If (Original_sifra.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_sifra.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_opis Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_opis,String)
            End If
            If (Original_stopa.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_stopa.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(id_pdv,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class robaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "roba"
            tableMapping.ColumnMappings.Add("id_roba", "id_roba")
            tableMapping.ColumnMappings.Add("sifra", "sifra")
            tableMapping.ColumnMappings.Add("sifra_opis", "sifra_opis")
            tableMapping.ColumnMappings.Add("naziv", "naziv")
            tableMapping.ColumnMappings.Add("jm", "jm")
            tableMapping.ColumnMappings.Add("nabavna", "nabavna")
            tableMapping.ColumnMappings.Add("nabavna_euro", "nabavna_euro")
            tableMapping.ColumnMappings.Add("rabat", "rabat")
            tableMapping.ColumnMappings.Add("pdv", "pdv")
            tableMapping.ColumnMappings.Add("cena", "cena")
            tableMapping.ColumnMappings.Add("euro", "euro")
            tableMapping.ColumnMappings.Add("kolicina", "kolicina")
            tableMapping.ColumnMappings.Add("marza", "marza")
            tableMapping.ColumnMappings.Add("min_kolicina", "min_kolicina")
            tableMapping.ColumnMappings.Add("kategorija", "kategorija")
            tableMapping.ColumnMappings.Add("bod", "bod")
            tableMapping.ColumnMappings.Add("bod_cena", "bod_cena")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[roba] WHERE (([id_roba] = @Original_id_roba) AND ((@IsNull_sif"& _ 
                "ra = 1 AND [sifra] IS NULL) OR ([sifra] = @Original_sifra)) AND ((@IsNull_sifra_"& _ 
                "opis = 1 AND [sifra_opis] IS NULL) OR ([sifra_opis] = @Original_sifra_opis)) AND"& _ 
                " ((@IsNull_naziv = 1 AND [naziv] IS NULL) OR ([naziv] = @Original_naziv)) AND (("& _ 
                "@IsNull_jm = 1 AND [jm] IS NULL) OR ([jm] = @Original_jm)) AND ((@IsNull_nabavna"& _ 
                " = 1 AND [nabavna] IS NULL) OR ([nabavna] = @Original_nabavna)) AND ((@IsNull_na"& _ 
                "bavna_euro = 1 AND [nabavna_euro] IS NULL) OR ([nabavna_euro] = @Original_nabavn"& _ 
                "a_euro)) AND ((@IsNull_rabat = 1 AND [rabat] IS NULL) OR ([rabat] = @Original_ra"& _ 
                "bat)) AND ((@IsNull_pdv = 1 AND [pdv] IS NULL) OR ([pdv] = @Original_pdv)) AND ("& _ 
                "(@IsNull_cena = 1 AND [cena] IS NULL) OR ([cena] = @Original_cena)) AND ((@IsNul"& _ 
                "l_euro = 1 AND [euro] IS NULL) OR ([euro] = @Original_euro)) AND ((@IsNull_kolic"& _ 
                "ina = 1 AND [kolicina] IS NULL) OR ([kolicina] = @Original_kolicina)) AND ((@IsN"& _ 
                "ull_marza = 1 AND [marza] IS NULL) OR ([marza] = @Original_marza)) AND ((@IsNull"& _ 
                "_min_kolicina = 1 AND [min_kolicina] IS NULL) OR ([min_kolicina] = @Original_min"& _ 
                "_kolicina)) AND ((@IsNull_kategorija = 1 AND [kategorija] IS NULL) OR ([kategori"& _ 
                "ja] = @Original_kategorija)) AND ((@IsNull_bod = 1 AND [bod] IS NULL) OR ([bod] "& _ 
                "= @Original_bod)) AND ((@IsNull_bod_cena = 1 AND [bod_cena] IS NULL) OR ([bod_ce"& _ 
                "na] = @Original_bod_cena)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_roba", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_roba", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra_opis", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra_opis", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra_opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra_opis", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_naziv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_jm", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "jm", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_jm", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "jm", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_nabavna", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nabavna", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nabavna", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "nabavna", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_nabavna_euro", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nabavna_euro", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nabavna_euro", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "nabavna_euro", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_rabat", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "rabat", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_rabat", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "rabat", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_pdv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pdv", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pdv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pdv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_cena", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "cena", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_cena", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "cena", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_euro", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "euro", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_euro", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "euro", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_kolicina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "kolicina", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_kolicina", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "kolicina", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_marza", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "marza", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_marza", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "marza", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_min_kolicina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "min_kolicina", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_min_kolicina", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "min_kolicina", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_kategorija", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "kategorija", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_kategorija", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "kategorija", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_bod", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "bod", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_bod", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "bod", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_bod_cena", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "bod_cena", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_bod_cena", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "bod_cena", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[roba] ([sifra], [sifra_opis], [naziv], [jm], [nabavna], [nabav"& _ 
                "na_euro], [rabat], [pdv], [cena], [euro], [kolicina], [marza], [min_kolicina], ["& _ 
                "kategorija], [bod], [bod_cena]) VALUES (@sifra, @sifra_opis, @naziv, @jm, @nabav"& _ 
                "na, @nabavna_euro, @rabat, @pdv, @cena, @euro, @kolicina, @marza, @min_kolicina,"& _ 
                " @kategorija, @bod, @bod_cena);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_roba, sifra, sifra_opis, naziv, jm, n"& _ 
                "abavna, nabavna_euro, rabat, pdv, cena, euro, kolicina, marza, min_kolicina, kat"& _ 
                "egorija, bod, bod_cena FROM roba WHERE (id_roba = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra_opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra_opis", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@jm", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "jm", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nabavna", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "nabavna", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nabavna_euro", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "nabavna_euro", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@rabat", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "rabat", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pdv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pdv", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@cena", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "cena", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@euro", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "euro", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@kolicina", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "kolicina", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@marza", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "marza", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@min_kolicina", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "min_kolicina", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@kategorija", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "kategorija", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@bod", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "bod", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@bod_cena", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "bod_cena", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[roba] SET [sifra] = @sifra, [sifra_opis] = @sifra_opis, [naziv] = @"& _ 
                "naziv, [jm] = @jm, [nabavna] = @nabavna, [nabavna_euro] = @nabavna_euro, [rabat]"& _ 
                " = @rabat, [pdv] = @pdv, [cena] = @cena, [euro] = @euro, [kolicina] = @kolicina,"& _ 
                " [marza] = @marza, [min_kolicina] = @min_kolicina, [kategorija] = @kategorija, ["& _ 
                "bod] = @bod, [bod_cena] = @bod_cena WHERE (([id_roba] = @Original_id_roba) AND ("& _ 
                "(@IsNull_sifra = 1 AND [sifra] IS NULL) OR ([sifra] = @Original_sifra)) AND ((@I"& _ 
                "sNull_sifra_opis = 1 AND [sifra_opis] IS NULL) OR ([sifra_opis] = @Original_sifr"& _ 
                "a_opis)) AND ((@IsNull_naziv = 1 AND [naziv] IS NULL) OR ([naziv] = @Original_na"& _ 
                "ziv)) AND ((@IsNull_jm = 1 AND [jm] IS NULL) OR ([jm] = @Original_jm)) AND ((@Is"& _ 
                "Null_nabavna = 1 AND [nabavna] IS NULL) OR ([nabavna] = @Original_nabavna)) AND "& _ 
                "((@IsNull_nabavna_euro = 1 AND [nabavna_euro] IS NULL) OR ([nabavna_euro] = @Ori"& _ 
                "ginal_nabavna_euro)) AND ((@IsNull_rabat = 1 AND [rabat] IS NULL) OR ([rabat] = "& _ 
                "@Original_rabat)) AND ((@IsNull_pdv = 1 AND [pdv] IS NULL) OR ([pdv] = @Original"& _ 
                "_pdv)) AND ((@IsNull_cena = 1 AND [cena] IS NULL) OR ([cena] = @Original_cena)) "& _ 
                "AND ((@IsNull_euro = 1 AND [euro] IS NULL) OR ([euro] = @Original_euro)) AND ((@"& _ 
                "IsNull_kolicina = 1 AND [kolicina] IS NULL) OR ([kolicina] = @Original_kolicina)"& _ 
                ") AND ((@IsNull_marza = 1 AND [marza] IS NULL) OR ([marza] = @Original_marza)) A"& _ 
                "ND ((@IsNull_min_kolicina = 1 AND [min_kolicina] IS NULL) OR ([min_kolicina] = @"& _ 
                "Original_min_kolicina)) AND ((@IsNull_kategorija = 1 AND [kategorija] IS NULL) O"& _ 
                "R ([kategorija] = @Original_kategorija)) AND ((@IsNull_bod = 1 AND [bod] IS NULL"& _ 
                ") OR ([bod] = @Original_bod)) AND ((@IsNull_bod_cena = 1 AND [bod_cena] IS NULL)"& _ 
                " OR ([bod_cena] = @Original_bod_cena)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT id_roba, sifra, sifra_opis, naz"& _ 
                "iv, jm, nabavna, nabavna_euro, rabat, pdv, cena, euro, kolicina, marza, min_koli"& _ 
                "cina, kategorija, bod, bod_cena FROM roba WHERE (id_roba = @id_roba)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sifra_opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra_opis", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@jm", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "jm", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nabavna", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "nabavna", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nabavna_euro", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "nabavna_euro", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@rabat", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "rabat", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@pdv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pdv", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@cena", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "cena", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@euro", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "euro", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@kolicina", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "kolicina", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@marza", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "marza", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@min_kolicina", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "min_kolicina", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@kategorija", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "kategorija", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@bod", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "bod", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@bod_cena", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "bod_cena", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_id_roba", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id_roba", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_sifra_opis", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra_opis", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sifra_opis", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sifra_opis", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_naziv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_naziv", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "naziv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_jm", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "jm", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_jm", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "jm", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_nabavna", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nabavna", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nabavna", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "nabavna", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_nabavna_euro", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nabavna_euro", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nabavna_euro", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "nabavna_euro", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_rabat", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "rabat", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_rabat", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "rabat", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_pdv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pdv", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_pdv", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pdv", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_cena", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "cena", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_cena", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "cena", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_euro", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "euro", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_euro", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "euro", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_kolicina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "kolicina", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_kolicina", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "kolicina", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_marza", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "marza", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_marza", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "marza", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_min_kolicina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "min_kolicina", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_min_kolicina", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "min_kolicina", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_kategorija", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "kategorija", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_kategorija", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "kategorija", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_bod", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "bod", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_bod", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "bod", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_bod_cena", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "bod_cena", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_bod_cena", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "bod_cena", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@id_roba", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "id_roba", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Farma.My.MySettings.Default.farmaConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id_roba, sifra, sifra_opis, naziv, jm, nabavna, nabavna_euro, rabat, pdv, "& _ 
                "cena, euro, kolicina, marza, min_kolicina, kategorija, bod, bod_cena FROM dbo.rm"& _ 
                "_artikli"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As farmaDataSet.robaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As farmaDataSet.robaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As farmaDataSet.robaDataTable = New farmaDataSet.robaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As farmaDataSet.robaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As farmaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "roba")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_id_roba As Integer,  _
                    ByVal Original_sifra As String,  _
                    ByVal Original_sifra_opis As String,  _
                    ByVal Original_naziv As String,  _
                    ByVal Original_jm As String,  _
                    ByVal Original_nabavna As System.Nullable(Of Decimal),  _
                    ByVal Original_nabavna_euro As System.Nullable(Of Decimal),  _
                    ByVal Original_rabat As System.Nullable(Of Decimal),  _
                    ByVal Original_pdv As System.Nullable(Of Integer),  _
                    ByVal Original_cena As System.Nullable(Of Decimal),  _
                    ByVal Original_euro As System.Nullable(Of Decimal),  _
                    ByVal Original_kolicina As System.Nullable(Of Decimal),  _
                    ByVal Original_marza As System.Nullable(Of Decimal),  _
                    ByVal Original_min_kolicina As System.Nullable(Of Decimal),  _
                    ByVal Original_kategorija As String,  _
                    ByVal Original_bod As System.Nullable(Of Boolean),  _
                    ByVal Original_bod_cena As System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_id_roba,Integer)
            If (Original_sifra Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_sifra,String)
            End If
            If (Original_sifra_opis Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_sifra_opis,String)
            End If
            If (Original_naziv Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_naziv,String)
            End If
            If (Original_jm Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_jm,String)
            End If
            If (Original_nabavna.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_nabavna.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_nabavna_euro.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_nabavna_euro.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_rabat.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_rabat.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_pdv.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_pdv.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_cena.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_cena.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (Original_euro.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_euro.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (Original_kolicina.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_kolicina.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (Original_marza.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_marza.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (Original_min_kolicina.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_min_kolicina.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_kategorija Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_kategorija,String)
            End If
            If (Original_bod.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_bod.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = System.DBNull.Value
            End If
            If (Original_bod_cena.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_bod_cena.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal sifra As String,  _
                    ByVal sifra_opis As String,  _
                    ByVal naziv As String,  _
                    ByVal jm As String,  _
                    ByVal nabavna As System.Nullable(Of Decimal),  _
                    ByVal nabavna_euro As System.Nullable(Of Decimal),  _
                    ByVal rabat As System.Nullable(Of Decimal),  _
                    ByVal pdv As System.Nullable(Of Integer),  _
                    ByVal cena As System.Nullable(Of Decimal),  _
                    ByVal euro As System.Nullable(Of Decimal),  _
                    ByVal kolicina As System.Nullable(Of Decimal),  _
                    ByVal marza As System.Nullable(Of Decimal),  _
                    ByVal min_kolicina As System.Nullable(Of Decimal),  _
                    ByVal kategorija As String,  _
                    ByVal bod As System.Nullable(Of Boolean),  _
                    ByVal bod_cena As System.Nullable(Of Decimal)) As Integer
            If (sifra Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(sifra,String)
            End If
            If (sifra_opis Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sifra_opis,String)
            End If
            If (naziv Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(naziv,String)
            End If
            If (jm Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(jm,String)
            End If
            If (nabavna.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(nabavna.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (nabavna_euro.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(nabavna_euro.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (rabat.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(rabat.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (pdv.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(pdv.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (cena.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(cena.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (euro.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(euro.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (kolicina.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(kolicina.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (marza.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(marza.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (min_kolicina.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(min_kolicina.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (kategorija Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(kategorija,String)
            End If
            If (bod.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(bod.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (bod_cena.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(bod_cena.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sifra As String,  _
                    ByVal sifra_opis As String,  _
                    ByVal naziv As String,  _
                    ByVal jm As String,  _
                    ByVal nabavna As System.Nullable(Of Decimal),  _
                    ByVal nabavna_euro As System.Nullable(Of Decimal),  _
                    ByVal rabat As System.Nullable(Of Decimal),  _
                    ByVal pdv As System.Nullable(Of Integer),  _
                    ByVal cena As System.Nullable(Of Decimal),  _
                    ByVal euro As System.Nullable(Of Decimal),  _
                    ByVal kolicina As System.Nullable(Of Decimal),  _
                    ByVal marza As System.Nullable(Of Decimal),  _
                    ByVal min_kolicina As System.Nullable(Of Decimal),  _
                    ByVal kategorija As String,  _
                    ByVal bod As System.Nullable(Of Boolean),  _
                    ByVal bod_cena As System.Nullable(Of Decimal),  _
                    ByVal Original_id_roba As Integer,  _
                    ByVal Original_sifra As String,  _
                    ByVal Original_sifra_opis As String,  _
                    ByVal Original_naziv As String,  _
                    ByVal Original_jm As String,  _
                    ByVal Original_nabavna As System.Nullable(Of Decimal),  _
                    ByVal Original_nabavna_euro As System.Nullable(Of Decimal),  _
                    ByVal Original_rabat As System.Nullable(Of Decimal),  _
                    ByVal Original_pdv As System.Nullable(Of Integer),  _
                    ByVal Original_cena As System.Nullable(Of Decimal),  _
                    ByVal Original_euro As System.Nullable(Of Decimal),  _
                    ByVal Original_kolicina As System.Nullable(Of Decimal),  _
                    ByVal Original_marza As System.Nullable(Of Decimal),  _
                    ByVal Original_min_kolicina As System.Nullable(Of Decimal),  _
                    ByVal Original_kategorija As String,  _
                    ByVal Original_bod As System.Nullable(Of Boolean),  _
                    ByVal Original_bod_cena As System.Nullable(Of Decimal),  _
                    ByVal id_roba As Integer) As Integer
            If (sifra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sifra,String)
            End If
            If (sifra_opis Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sifra_opis,String)
            End If
            If (naziv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(naziv,String)
            End If
            If (jm Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(jm,String)
            End If
            If (nabavna.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(nabavna.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (nabavna_euro.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(nabavna_euro.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (rabat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(rabat.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (pdv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(pdv.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (cena.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(cena.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (euro.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(euro.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (kolicina.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(kolicina.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (marza.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(marza.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (min_kolicina.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(min_kolicina.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (kategorija Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(kategorija,String)
            End If
            If (bod.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(bod.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (bod_cena.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(bod_cena.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_id_roba,Integer)
            If (Original_sifra Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_sifra,String)
            End If
            If (Original_sifra_opis Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_sifra_opis,String)
            End If
            If (Original_naziv Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_naziv,String)
            End If
            If (Original_jm Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_jm,String)
            End If
            If (Original_nabavna.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_nabavna.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_nabavna_euro.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_nabavna_euro.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_rabat.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_rabat.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            End If
            If (Original_pdv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_pdv.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            End If
            If (Original_cena.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_cena.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = System.DBNull.Value
            End If
            If (Original_euro.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_euro.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = System.DBNull.Value
            End If
            If (Original_kolicina.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_kolicina.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = System.DBNull.Value
            End If
            If (Original_marza.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_marza.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = System.DBNull.Value
            End If
            If (Original_min_kolicina.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_min_kolicina.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = System.DBNull.Value
            End If
            If (Original_kategorija Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_kategorija,String)
            End If
            If (Original_bod.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_bod.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = System.DBNull.Value
            End If
            If (Original_bod_cena.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_bod_cena.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(id_roba,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
